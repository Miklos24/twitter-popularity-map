[{"/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/index.js":"1","/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/App.js":"2","/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/reportWebVitals.js":"3","/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/Components/MapChart.js":"4","/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/Components/MapSettings.js":"5"},{"size":500,"mtime":1608876086608,"results":"6","hashOfConfig":"7"},{"size":1961,"mtime":1609230961821,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1608589604508,"results":"9","hashOfConfig":"7"},{"size":1514,"mtime":1609230961822,"results":"10","hashOfConfig":"7"},{"size":1598,"mtime":1609230961823,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"13obsjr",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/index.js",[],["26","27"],"/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/App.js",["28"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MapChart from './Components/MapChart';\nimport MapSettings from './Components/MapSettings';\n\nfunction App() {\n  const [type, setType] = useState(\"pos\");\n  const [date, setDate] = useState(new Date(Date.now()))\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Hated in the Nation </h1>\n      </header>\n      <div className=\"App-body\">\n        <MapSettings\n          date={date}\n          type={type}\n          updateMap={(dt, tp) => {\n            setDate(dt);\n            setType(tp);\n          }}\n        />\n        <div className=\"Map-container\">\n          <MapChart tweet_type={type} tweet_date={date}/>\n        </div>\n        <p>\n          To create this site, I ran a sentiment analysis on a random sample of 200\n          tweets published in the last 7 days for each state in the United States.\n          I determined if a particular tweet was about a particular US state by using the Twitter\n          API's new <em>Annotations</em> feature, which uses AI to determine if\n          a tweet is discussion a particular topic. Every day, I repeated this analysis to try to get an idea of how sentiment about states changed\n          over time. You can observe this change by adjusting the date slider.\n          I also decided to judge each state by tweets that showed a favorable\n          bent, as well as an unfavorable one. I guessed that these two variables\n          wouldn't be perfect correlated, and was interested to see the results.\n          To see those results for yourself, you can toggle between the Favorable\n          and Unfavorable Tweets.\n        </p>\n        <p>\n          In the future, there are many features I'd like to add. I would list them,\n          but I am tired. Apologies for the wall of text.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/reportWebVitals.js",[],"/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/Components/MapChart.js",[],["29","30"],"/Users/miklos/Desktop/Files/Career/Projects/twitter-popularity-map/src/Components/MapSettings.js",["31","32"],"import ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport Form from 'react-bootstrap/Form';\nimport { useState, useEffect } from 'react';\n\nconst MapSettings = (props) => {\n  const [minDate, setMinDate] = useState(new Date(2020, 11, 28))\n\n  const updateFunc = props.updateMap\n  const date = props.date\n  const type = props.type\n\n  return (\n    <div className=\"Map-settings\">\n      <div className=\"Map-slider\">\n        <Form>\n          <Form.Control\n            type=\"range\"\n            min={0}\n            max={Math.round((Date.now() - minDate) / (24 * 60 * 60 * 1000))}\n            step={1}\n            value={Math.round((date - minDate) / (24 * 60 * 60 * 1000))}\n            onChange={(e) => {\n              e.preventDefault();\n              updateFunc(new Date(minDate.getTime() + (e.target.value * (24 * 60 * 60 * 1000))), type);\n            }}\n          />\n        </Form>\n        <p>{date.toDateString()}</p>\n      </div>\n      <div className=\"Map-toggle\">\n        <ToggleButtonGroup className=\"d-flex\" type=\"radio\" name=\"options\" defaultValue={type === \"neg\" ? 1 : 2}>\n          <ToggleButton\n            value={1}\n            variant=\"outline-danger\"\n            onClick={() => updateFunc(date, \"neg\")}\n          > Unfavorable Tweets </ToggleButton>\n          <ToggleButton\n            value={2}\n            variant=\"outline-success\"\n            onClick={() => updateFunc(date, \"pos\")}\n          > Favorable Tweets </ToggleButton>\n        </ToggleButtonGroup>\n      </div>\n    </div>\n  )\n}\n\nexport default MapSettings;\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":36},{"ruleId":"33","replacedBy":"41"},{"ruleId":"35","replacedBy":"42"},{"ruleId":"37","severity":1,"message":"38","line":4,"column":20,"nodeType":"39","messageId":"40","endLine":4,"endColumn":29},{"ruleId":"37","severity":1,"message":"43","line":7,"column":19,"nodeType":"39","messageId":"40","endLine":7,"endColumn":29},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["44"],["45"],"'setMinDate' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]