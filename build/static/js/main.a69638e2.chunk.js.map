{"version":3,"sources":["Components/MapChart.js","Components/MapSettings.js","App.js","reportWebVitals.js","index.js"],"names":["MapChart","props","useState","data","setData","type","tweet_type","date","tweet_date","Date","curDate","setCurDate","useEffect","Object","entries","length","fetch","getTime","then","res","json","console","log","colorScale","d3","domain","values","map","range","projection","geography","geographies","geo","fill","properties","name","stroke","rsmKey","MapSettings","minDate","updateFunc","updateMap","className","Form","Control","min","max","step","value","Math","round","onChange","e","preventDefault","target","toDateString","ToggleButtonGroup","defaultValue","ToggleButton","variant","onClick","App","setType","setDate","dt","tp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a69638e2.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport * as d3 from 'd3';\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst MapChart = (props) => {\n  const [data, setData] = useState({});\n  const type = props.tweet_type;\n  const date = props.tweet_date;\n  const [curDate, setCurDate] = useState(new Date(2020, 11, 29));\n\n\n  useEffect(() => {\n    if (Object.entries(data).length === 0 || date !== curDate) {\n      fetch(`/api/tweets?date=${date.getTime()}`)\n        .then(res => res.json())\n        .then(data => {\n          setData(data)\n        })\n      setCurDate(date);\n    }\n    console.log(data);\n  }, [data, date, curDate]);\n\n  const colorScale = d3.scaleQuantile()\n    .domain(d3.extent(Object.values(data).map(({ [`${type}_score`] : score }) => (score))))\n    .range(d3.schemePurples[9]);\n\n  return (\n    <ComposableMap projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) =>\n          geographies.map(geo => {\n            return (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                fill={geo.properties.name in data\n                  ? colorScale(data[geo.properties.name][`${type}_score`])\n                  : \"#FFFFFF\"\n                }\n                stroke={\"rgb(186, 186, 186)\"}\n              />\n            );\n          })\n        }\n      </Geographies>\n    </ComposableMap>\n  )\n}\n\nexport default MapChart;\n","import ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport Form from 'react-bootstrap/Form';\nimport { useState, useEffect } from 'react';\n\nconst MapSettings = (props) => {\n  const [minDate, setMinDate] = useState(new Date(2020, 11, 28))\n\n  const updateFunc = props.updateMap\n  const date = props.date\n  const type = props.type\n\n  return (\n    <div className=\"Map-settings\">\n      <div className=\"Map-slider\">\n        <Form>\n          <Form.Control\n            type=\"range\"\n            min={0}\n            max={1}\n            step={1}\n            value={Math.round((date - minDate) / (24 * 60 * 60 * 1000))}\n            onChange={(e) => {\n              e.preventDefault();\n              updateFunc(new Date(minDate.getTime() + (e.target.value * (24 * 60 * 60 * 1000))), type);\n            }}\n          />\n        </Form>\n        <p>{date.toDateString()}</p>\n      </div>\n      <div className=\"Map-toggle\">\n        <ToggleButtonGroup className=\"d-flex\" type=\"radio\" name=\"options\" defaultValue={type === \"neg\" ? 1 : 2}>\n          <ToggleButton\n            value={1}\n            variant=\"outline-danger\"\n            onClick={() => updateFunc(date, \"neg\")}\n          > Unfavorable Tweets </ToggleButton>\n          <ToggleButton\n            value={2}\n            variant=\"outline-success\"\n            onClick={() => updateFunc(date, \"pos\")}\n          > Favorable Tweets </ToggleButton>\n        </ToggleButtonGroup>\n      </div>\n    </div>\n  )\n}\n\nexport default MapSettings;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MapChart from './Components/MapChart';\nimport MapSettings from './Components/MapSettings';\n\nfunction App() {\n  const [type, setType] = useState(\"pos\");\n  const [date, setDate] = useState(new Date(2020, 11, 29))\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Hated in the Nation </h1>\n      </header>\n      <div className=\"App-body\">\n        <MapSettings\n          date={date}\n          type={type}\n          updateMap={(dt, tp) => {\n            setDate(dt);\n            setType(tp);\n          }}\n        />\n        <div className=\"Map-container\">\n          <MapChart tweet_type={type} tweet_date={date}/>\n        </div>\n        <p>\n          Use the slider on the left to select a date to poll tweets from, and use the right toggle to get positive or negative tweets.\n        </p>\n        // <p>\n        //   In the future, there are many features I'd like to add. I would list them,\n        //   but I am tired. Apologies for the wall of text.\n        // </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}